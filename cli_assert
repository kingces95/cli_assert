#!/usr/bin/env bash
source $(cli loader)

export() {

  assert::fail() {
    printf "âœ– %s\n" "$@" >&2
    exit 1
  }

  assert::pipe_eq() (
    : ${arg_eq:='assert::eq'}

    while read ${arg_read_option-}; do
      if (( $# == 0 )); then
        assert::fail "More actual values than expected values at '${REPLY}'."
      fi

      ${arg_eq} "${REPLY}" "${1-}" "actual != expected"
      shift
    done

    if (( $# != 0 )); then
      assert::fail "More expected values than actual values at '$1'."
    fi
  )

  assert::pipe_records_eq() (
    arg_eq=assert::records_eq assert::pipe_eq "$@"
  )

  assert::pipe_eq_exact() (
    IFS= arg_read_option='-r' assert::pipe_eq "$@"
  )

  assert::records_eq() {
    local actual=( $1 )
    local expected=( $2 )
    local message="$3"

    assert::array_eq actual expected "${message}"
  }

  assert::pipe_fails() {
    local msg=${1:-''}

    if (source /dev/stdin 2> /dev/null); then
      assert::fail "Unexpected succeeded, expected failure :: ${msg}"
    fi
  }

  assert::fails() {
    local statement="$1 2> /dev/null"
    local msg=${2:-''}

    if (eval $statement); then
      assert::fail "\"$1\" succeeded, expected failure :: ${msg}"
    fi
  }

  assert::file_does_not_exist() {
    ! test -f "$1"
    assert::ok "$2"
  }

  assert::non_empty_file_exists() {
    test -s "$1"
    assert::ok "$2"
  }

  assert::empty_file_exists() {
    test -f "$1" && ! test -s "$1"
    assert::ok "$2"
  }

  assert::file_exists() {
    test -f "$1"
    assert::ok "$2"
  }

  assert::ok() {
    local exit_code=$?
    local msg=${1:-''}

    if (( exit_code != 0 )); then
      assert::fail "Expected success but actually exited with ${exit_code} :: ${msg}"
    fi
  }

  assert::failed() {
    local exit_code=$?
    local msg=${1:-''}

    if (( exit_code == 0 )); then
      assert::fail "Expected failure but actually exited with ${exit_code} :: ${msg}"
    fi
  }

  assert::returns() {
    local statement="$1"
    local expected_exit_code="$2"
    local msg=${3:-''}

    (eval $statement)
    assert::ok
  }

  assert::eq() {
    local expected="$1"
    local actual="$2"
    local msg=${3:-''}

    if [[ "${expected}" != "${actual}" ]]; then
      assert::fail "'${expected}' != '${actual}' :: ${msg}"
      return 1
    fi
  }

  assert::match() {
    local value="$1"
    local regex="$2"
    local msg=${3:-''}

    if [[ ! "${value}" =~ ${regex} ]]; then
      assert::fail "${value} =~ ${regex} :: ${msg}"
      return 1
    fi
  }

  assert::not_eq() {
    local expected="$1"
    local actual="$2"
    local msg=${3:-''}

    if [[ "${expected}" == "${actual}" ]]; then
      assert::fail "${expected} != ${actual} :: ${msg}"
      return 1
    fi
  }

  assert::array_eq() {
    declare -n __actual=$1
    declare -n __expected=$2

    local msg=${3:-''}

    local expected_length=${#__expected[@]}
    local actual_length=${#__actual[@]}
    if (( expected_length != actual_length )); then
      assert::fail "expected/actual lengths differs :: ${expected_length} != ${actual_length} :: $msg"
      return 1
    fi

    for i in "${!__expected[@]}"; do 
      if [[ "${__expected[$i]}" != "${__actual[$i]}" ]]; then
        assert::fail "expected differs from actual at $i :: '${__expected[$i]}' != '${__actual[$i]}' :: $msg"
        return 1
      fi
    done
  }

  assert::empty() {
    local actual
    local msg

    actual="$1"

    if [ "$#" -ge 2 ]; then
      msg="$2"
    fi

    assert::eq "" "$actual" "$msg"
    return "$?"
  }

  assert::not_empty() {
    local actual
    local msg

    actual="$1"

    if [ "$#" -ge 2 ]; then
      msg="$2"
    fi

    assert::not_eq "" "$actual" "$msg"
    return "$?"
  }

  assert::contain() {
    local haystack="$1"
    local needle="$2"
    local msg

    if [ "$#" -ge 3 ]; then
      msg="$3"
    fi

    if [ -z "${needle:+x}" ]; then
      return 0;
    fi

    if [ -z "${haystack##*$needle*}" ]; then
      return 0
    else
      [ "${#msg}" -gt 0 ] && assert::fail "$haystack doesn't contain $needle :: $msg" || true
      return 1
    fi
  }

  assert::not_contain() {
    local haystack="$1"
    local needle="$2"
    local msg

    if [ "$#" -ge 3 ]; then
      msg="$3"
    fi

    if [ -z "${needle:+x}" ]; then
      return 0;
    fi

    if [ "${haystack##*$needle*}" ]; then
      return 0
    else
      [ "${#msg}" -gt 0 ] && assert::fail "$haystack contains $needle :: $msg" || true
      return 1
    fi
  }

  assert::gt() {
    local first="$1"
    local second="$2"
    local msg

    if [ "$#" -ge 3 ]; then
      msg="$3"
    fi

    if [[ "$first" -gt  "$second" ]]; then
      return 0
    else
      [ "${#msg}" -gt 0 ] && assert::fail "$first > $second :: $msg" || true
      return 1
    fi
  }

  assert::ge() {
    local first="$1"
    local second="$2"
    local msg

    if [ "$#" -ge 3 ]; then
      msg="$3"
    fi

    if [[ "$first" -ge  "$second" ]]; then
      return 0
    else
      [ "${#msg}" -gt 0 ] && assert::fail "$first >= $second :: $msg" || true
      return 1
    fi
  }

  assert::lt() {
    local first="$1"
    local second="$2"
    local msg

    if [ "$#" -ge 3 ]; then
      msg="$3"
    fi

    if [[ "$first" -lt  "$second" ]]; then
      return 0
    else
      [ "${#msg}" -gt 0 ] && assert::fail "$first < $second :: $msg" || true
      return 1
    fi
  }

  assert::le() {
    local first="$1"
    local second="$2"
    local msg

    if [ "$#" -ge 3 ]; then
      msg="$3"
    fi

    if [[ "$first" -le  "$second" ]]; then
      return 0
    else
      [ "${#msg}" -gt 0 ] && assert::fail "$first <= $second :: $msg" || true
      return 1
    fi
  }

  cli::export assert
}

cli::load "$@"